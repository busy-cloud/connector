{
  "title": "创建连接",
  "template": "form",
  "fields": [
    {
      "key": "id",
      "label": "ID",
      "type": "text",
      "required": true
    },
    {
      "key": "name",
      "label": "名称",
      "type": "text",
      "required": true
    },
    {
      "key": "type",
      "label": "类型",
      "type": "select",
      "options": [
        {
          "value": "serial",
          "label": "串口"
        },
        {
          "value": "tcp-client",
          "label": "TCP客户端"
        },
        {
          "value": "tcp-server",
          "label": "TCP服务器"
        },
        {
          "value": "tcp-server-multiple",
          "label": "TCP服务器（多接入）"
        },
        {
          "value": "gnet-server",
          "label": "GNet高并发服务器"
        }
      ]
    },
    {
      "key": "address",
      "label": "地址",
      "type": "text"
    },
    {
      "key": "port",
      "label": "端口",
      "type": "number",
      "required": true
    },
    {
      "key": "serial_options",
      "label": "串口参数",
      "type": "object",
      "children": [
        {
          "key": "port_name",
          "label": "串口",
          "type": "select"
        },
        {
          "key": "baud_rate",
          "label": "波特率",
          "type": "number",
          "default": 9600
        },
        {
          "key": "data_bits",
          "label": "字长",
          "type": "number",
          "default": 8
        },
        {
          "key": "stop_bits",
          "label": "结束符",
          "type": "select",
          "options": [
            {
              "value": 1,
              "label": "1"
            },
            {
              "disabled": true,
              "value": 2,
              "label": "1.5"
            },
            {
              "value": 2,
              "label": "2"
            }
          ]
        },
        {
          "key": "parity_mode",
          "label": "检验模式",
          "type": "select",
          "options": [
            {
              "value": 0,
              "label": "None"
            },
            {
              "value": 1,
              "label": "Odd"
            },
            {
              "value": 2,
              "label": "Even"
            }
          ]
        }
      ]
    },
    {
      "key": "register_options",
      "label": "注册参数",
      "type": "object",
      "children": [
        {
          "key": "type",
          "label": "数据类型",
          "type": "select",
          "options": [
            {
              "value": "string",
              "label": "字符串"
            },
            {
              "value": "json",
              "label": "JSON包"
            }
          ]
        },
        {
          "key": "regex",
          "label": "正则表达式",
          "type": "text"
        },
        {
          "key": "field",
          "label": "JSON字段",
          "type": "text"
        },
        {
          "key": "offset",
          "label": "偏移",
          "type": "number"
        },
        {
          "key": "length",
          "label": "长度",
          "type": "number"
        }
      ]
    },
    {
      "key": "protocol",
      "label": "协议",
      "type": "select",
      "options": [],
      "change_action": {
        "type": "script",
        "script": "setTimeout(()=>this.load_protocol_option(), 200)"
      }
    },
    {
      "key": "protocol_options",
      "label": "协议参数",
      "type": "object",
      "children": []
    }
  ],
  "submit_api": "connector/linker/create",
  "submit_success": "this.navigate('/page/connector/linker-detail?id='+data.id)",
  "mount": "this.load_protocols(); this.load_serial_ports()",
  "methods": {
    "load_serial_ports": "this.request.get('connector/serials').subscribe(res=>{this.content.fields[5].children[0].options=res.data.map(d=>{return {value:d,label:d}}); })",
    "load_protocols": "this.request.get('iot/protocol/list').subscribe(res=>{this.content.fields[7].options=res.data.map(d=>{return {value:d.name,label:d.description}}); setTimeout(()=>this.load_protocol_option(), 200);  })",
    "load_protocol_option": "this.editor.value.protocol && this.request.get('iot/protocol/'+this.editor.value.protocol+'/option').subscribe(res=>{this.content.fields[8].children=res.data.fields})"
  }
}